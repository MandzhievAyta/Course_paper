Gas Sensor Drift Mitigation using Classiﬁer Ensembles  I.2.6 [Arti cial Intelligence]: Learning|Concept learning; I.5.2 [Pattern Recognition]: Design Methodology| Classi er design and evaluation; I.5.1 [Pattern Recognition]: Models|Deterministic  Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for proﬁt or commercial advantage and that copies bear this notice and the full citation on the ﬁrst page. To copy otherwise, to republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission and/or a fee.
SensorKDD’11, August 21, 2011, San Diego, CA, USA.
Copyright 2011 ACM 978-1-4503-0832-8 ...$10.00.

The gradual and unpredictable change of sensor responses or the so-called sensor drift has long been recognized as one of the major challenges to develop electronic noses [9, 5, 25]. Random changes in the sensor responses deteriorates the performance of classi ers used for recognition of gases thereby increasing the maintenance costs of arti cial noses during real-time operation. There are several sources of sensor drift. In [11], the sensor drift is categorized into two main types: real drift due to aging and poisoning, and secondorder drift due to recording protocols, hysteresis, humidity and temperature changes. The most systematic analysis of long term drift was done in [19, 20] with data sets extending for long periods of time in real operating conditions.
Among the many conclusions drawn from that project, the following was emphasized: metal-oxide based (Figaro type [3]) gas sensors remain the best option for long term applications in continuous monitoring systems. The authors also emphasized the need for drift compensation using a reference/calibration gas and concluded that sensor replacement is unavoidable.
The standard approaches used in the chemical sensing community to cope with sensor drift are univariate methods where drift compensation is performed for each sensor individually and multivariate methods where the drift is corrected for the entire sensor array. The reader is referred to [11] and references therein for a survey on drift compensation methods. Among the multivariate drift compensation methods, (unsupervised) component correction techniques are popular [5, 10, 24]. These techniques basically rely on nding linear transformations that normalize the sensor responses across time so that a classi er can be directly applied to the resulting stationary data. For instance, the component correction method of [5] applies the following transformation to the measurement/data matrix X X (X c)c> where c is the principal component vector(s) of the measurements computed using a reference gas that hopefully  approximates the drift direction. The main drawback of these techniques is that they assume the drift direction to be linear in the feature space and therefore a linear transformation of the data su ces to correct it. While it is entirely plausible that kernelized versions of component analysis such as kernel principal component analysis [21] can be applied to account for non-linearities in the drift direction, these techniques have not been investigated much in the chemical sensing community. Also, with the exception of [24], these techniques require a reference gas that is used to approximate the drift direction; in other words, they assume that the drift direction in the reference gas explains the drift in all the other gases.
In this paper, we take a completely di erent approach to solve the problem where we do not make any of the above assumptions. We use a supervised machine learning method, namely, an ensemble of classi ers to cope with sensor drift.
To the best of our knowledge, such a machine learning approach that automatically detects and copes with sensor drift has not been applied in the chemical sensing community although it has been shown to yield promising results on problems with drifting concepts in machine learning and data mining [23, 12, 13, 14]. It is important to note that the ensemble method used in this paper complements existing component correction methods mentioned above; since component correction methods are essentially a pre-processing technique, we can indeed use the ensemble method on the pre-processed data too.
In the following sections, we will rst describe the experimental setup, the data set, and the feature extraction methods (Section 2). We will then describe the drift compensation algorithm (Section 3). Finally, we will present our experimental ndings (Section 4) and conclude (Section 5).

We applied our drift compensation method on an extensive data set1 recorded by a metal-oxide gas sensor array. In this section, we describe the experimental setup, the recording protocol, and the signal processing algorithms used for feature extraction.

We used an array of 16 screen-printed commercially available metal-oxide semiconductor gas sensors manufactured and commercialized by Figaro Inc. [3]. The sensors include an independently-controlled RuO2 (Ruthenium Oxide) electrical heating line and a metal oxide semiconductor lm as a sensor material printed onto the measuring electrodes (noble metal). The sensor element obtained is mounted onto an alumina substrate and then connected by lead wires to the pins of the sensor package. The resulting array has four types of sensors tagged as TGS2600, TGS2602, TGS2610, TGS2620.
We placed the resulting array (four for each type, 16 sensors in total) into a 60ml volume test chamber where the odorants of interest in gaseous form are injected for trials. To generate the required data set, we connected the test chamber to a computer-controlled continuous ow system, which provides versatility for conveying the chemical compounds of interest at the desired concentrations to the sensing chamber with high accuracy in a highly reproducible way while keeping the total ow constant. In particular, our system utilizes  three mass ow controllers (MFCs) (provided by Bronkhorst High-Tech B.V. [2]), each of them with di erent maximum ow levels. These devices connect to di erent pressurized gas cylinders diluted in dry air, which contain either the carrier gas or the odorants to be measured. To maintain the moisture level at 10% relative humidity (measured at 25oC 1oC) during the entire measurement process, we utilize synthetic dry air as background for all measurements, provided by Airgas Inc. [1]. Then, the analytes under analysis (ammonia, acetaldehyde, acetone, ethylene, ethanol, toluene) are added to this background in random order. The total ow rate across the sensing chamber was set to 200 ml/min and kept constant for the whole measurement process. The response of the gas sensor array was measured when the operating temperature of sensors was xed at 450oC. Finally, to ensure that reproducible response patterns were acquired during each measurement, the sensors were pre-heated for several days prior to the experiment.
The sensor response is read-out in the form of the resistance across the active layer of each sensor; hence each measurement produced a 16-channel time series sequence. The data acquisition board collected the data from the gas sensors and controlled the analog voltage signal to every sensor heater. This voltage is used to control and vary the sensor heater's operating temperature using the LabVIEW [4] environment running on a PC platform. The experimental setup is illustrated in the diagram shown in Figure 1.

Our data set consists of a six-gas/analyte problem delivered at di erent concentrations. The odor identity and concentration values in parts-per-million by volume (ppmv) are listed in Table 1. Each of the possible pairs of gas type and concentration was sampled in no particular order. The resulting data set consists of 13; 910 recordings (time series sequences) collected over a period of 36 months. The exact distribution of the number of measurements per month in shown in Table 2. Notice that some of the months shown in the table does not contain any measurements for one or more gases. The reason for this is that other analytes and complex mixtures that are not considered in this study were collected during that time using the same sensor array and experimental apparatus. Note that this increases the complexity of the problem due to interefence from these external analytes that may potentially a ect the sensor life.
As Table 2 indicates, the last batch of recordings, which contains 3600 measurements from the same analytes, was collected 5 months later and after the sensors were powered o during this period. This is particularly important not only because it allows us to validate the suggested method on a set of measurements collected 5 months later, but also because it is during this 5-month period that the sensors were subject to severe contamination, since external interferents could easily get attached to the sensing layer due to the lack of the operating temperature.
To generate the data set, we followed a measurement procedure consisting of the following steps. First, a constant ow of zero-grade dry air was circulated through the sensing chamber while the gas sensor array was kept at a stable operating temperature (450oC). This was done to measure the baseline steady-state sensor response (i.e., the sensor response in presence of no chemical analytes). Next, the desired concentration of the odorant was injected by the con tinuous ow system into the sensing chamber. Finally, in the third step (cleaning phase) the vapor was vacuumed away from the sensor array and the test chamber was cleaned with dry air before the concentration phase of a new measurement (for at least 10 minutes). The acquisition of these measurements took at least 300 seconds to complete, divided into 100 seconds for the gas injection phase and at least 200 seconds for the recovery (cleaning phase). For processing purposes, we considered the whole sensor response after subtracting the baseline from each record. The sampling rate was set to 100 Hz. Finally, the measurement process herein described was replicated for subsequent measurements.

The Figaro metal-oxide gas sensors are known to have a slow response to a chemical analyte. This response, under tightly-controlled operating conditions (i.e., constant air ow and xed operating temperature), typically involves a monotonically saturating smooth change in the conductance/resistance across its sensing layer due to the adsorption/desorption reactions of the chemical analyte occurring at the micro-porous surface of the sensor. The amount and speed of these reactions depends on (i) the analyte identity, (ii) the analyte concentration, (iii) the active layer (i.e., sensor type), and (iv) the surface temperature (i.e., the sensors' operating temperature). Since the last two factors are xed throughout the entire measurement procedure of this analysis, the sensor-analyte identity/concentration interaction process becomes the only factor that, as a pair, shapes the response pro le, and thus, that de nes the identity of the chemical analyte of interest [22]. Accordingly, features  re ecting all the sensing dynamics at the sensor surface are of special interest in our drift compensation analysis.
Feature extraction plays an important role in every chemosensory application [17]. It is de ned as a transformation mapping the sensor response to a space of lower dimension preserving the most meaningful portion of information contained in the original sensor signal. In this work, we consider two distinct types of features that exploit all dynamic processes occurring at the sensor surface, including the ones that will re ect its adsorption, desorption, and steady-state (or nal) responses of the sensor element. On one hand, we utilize the steady-state feature, which is the \gold-standard" for chemo-sensory feature extraction [15]. It is de ned as the di erence of the maximal resistance change and the baseline,  and its normalized version expressed by the ratio of the maximal resistance and the baseline values,  where r[k] is the time pro le of sensor resistance, k is the discrete time indexing the recording interval [0; T ] when the chemical vapor is present in the test chamber.
On the other hand, we also extract transient features, namely the exponential moving average (ema ), which is an aggregate of a number of standard features that we use to evaluate e ectively the transient portion of the sensor response during the entire measurement procedure under controlled ow conditions,  with k = 1; 2; : : : ; T , y[0] = 0, and the scalar 0 < < 1 is the smoothing parameter. ema is de ned for a given discrete-time signal r[ ] by the maximum gradient value of the transform. For di erent values of , the magnitude of this peak and its exact location (in time) varies. In particular, we set three di erent values for ( = 0:1, = 0:01, and = 0:001) as already used in [16] starting from the recorded rising portion, and three additional features with the same values in the decaying portion of the sensor response. Figure 2 shows the typical signal response of a chemical sensor in presence of 30 ppmv of Acetaldehyde and its ema representation for the three di erent values. Then, by applying this transformation to each one of the 16 channels in the recorded time-series, we map the sensor array response to a 128-dimensional feature vector, which resulted from the combination of the 8 features described above 16 sensors (see Table 3). The readers are referred to [16] for a more detailed discussion on these features.

We use an ensemble of classi ers [23, 13, 14] to detect and cope with sensor drift. Consider a binary classi cation problem with a set of features x as inputs and a class label (a gas/analyte in our problem) y as output. At every time step t, we receive a batch of examples St = f(x1; y1); : : : ; (xmt ; ymt )g of size mt. We train a classi er ft(x), for example a support vector machine (SVM) [7], using the current batch of examples. The nal classi er ht+1(x) at time step (t + 1) is a weighted combination of classi ers, i.e, ht+1(x) = Pt i=1 ifi(x),  Features considered in the rising portion of the sensor response  Features considered in the decaying portion of the sensor response  where f 1; : : : ; tg is the set of classi er weights. Under the assumption that the distribution of examples in the current batch St has not changed much from those in the previous batch St 1, we use the examples in batch St to estimate the weights f 1; : : : ; tg. There are several ways to estimate these weights. A simple and intuitive way is to assign weights to classi ers according to their prediction performance on batch St. Alternatively, we could solve an optimization problem such as  It is also possible to minimize a di erent loss function than the squared loss used above. For example, if the base classiers are SVMs, we can minimize the hinge loss L(f (x); y) = max(0; 1 yf (x)). Minimizing the squared loss as shown above has the advantage of computing the solution f 1; : : : ; tg in closed form. The algorithm in its most general form is given below.

In order to be able to train classi ers under these settings, we need su cient number of examples in each class and month.2. We therefore combined measurements from 36 months to form 10 batches in such a way that the number of measurements were as uniformly distributed as possible. Details on the number of measurements in each batch is given in Table 4. Figure 3 (right) shows the performance of an  Algorithm 1 Algorithm to cope with concept drift 1: for t = 1; : : : ; T do 2: Receive St = f(x1; y1); : : : ; (xmt ; ymt )g 3: Train a classi er (SVM) on St 4: Estimate the weights f 1; : : : ; tg using one of the techniques described in the text 5: end for 6: Output nal classi er: f 1; : : : ; T g and ff1; : : : ; fT g  For multiple classes, we can use one-vs-one or one-vs-all strategy [18] to train a classi er for every pair of classes or for every class respectively. Let L be the number of classes.
We can estimate a set of weights f 1c; : : : ; tcg for every class c 2 f1; : : : ; L2 g or c 2 f1; : : : ; L 1g by solving (4). Alternatively, if we want to assign weights according to the prediction performance of classi ers on the most recent batch, we can simply estimate a single set of weights f 1; : : : ; tg using the multi-class classi er prediction accuracies on every batch. In this case, predictions are made according to a weighted majority voting, i.e.,  In all our experiments, we trained multi-class SVMs (onevs-one strategy) with RBF kernel using the publicly available LibSVM software [6]. The kernel bandwidth parameter and the SVM C parameter were chosen using 10-fold cross validation by performing a grid search in the range [2 10; 2 9; : : : ; 24; 25] and [2 5; 2 4; : : : ; 29; 210] respectively.
We rst established the fact that the sensors are drifting and that the drift is degrading the performance of classiers. We trained a multi-class classi er on data collected during the rst two months and tested it on data from the remaining months. Details on the number of measurements collected during each month for a period of three years is given in Table 2. The classi er's performance measured in terms of prediction accuracy is shown in Figure 3 (left). We see that the performance gradually degrades with time; this serves as a clear indicator of sensor drift and the way it has a ected the accuracy of the classi er. On month 18 (ID: month18, in Table 2), we have only 3 measurements from class 2 and therefore the performance suddenly rises to 100%. We consider this to be an exception.
We then considered three settings as described below:  Setting 1 For every month, we trained a multi-class classier with data from only the previous month and tested it on the current month.

Setting 2 For every month, we trained an ensemble of multiclass classi ers using Algorithm 1.

Setting 3 Same as Setting 2 but with uniform weights on the individual (base) classi ers.

SVM (black line) trained on batch 1 and tested on batches 2 through 10. Note that this is the same SVM model used in Figure 3 (left) but tested on data from batches instead of months. Once again, we see that the performance of the classi er is degrading with time due to drift. We found similar behavior when we trained several SVMs on batches 2 through 5 and tested them on successive batches. These results are again shown in Figure 3 (right). The complete set of results, i.e., the accuracy of classi ers trained on batches 1 through 9 and tested on successive batches, is given in Table 5. The rst ve rows in this table correspond to the results plotted in Figure 3 (right). These classi ers were eventually used in our ensemble method with appropriate weights. Figure 4 shows the performance of classi ers under settings 1, 2 and 3 described above. As expected, classi ers trained under setting 1, i.e., using the most recent batch of examples, perform better than the classi er trained with data from only batch 1. We believe the drop in accuracy when testing on batches 5 and 6 using classi ers trained on batches 4 and 5 respectively is an artefact of the data set. Notice that batch 5 has no examples in class Toluene whereas batch 6 has 467 examples. Indeed, we found that the accuracy on batch 6 was increased by 10% when we removed examples from class Toluene. Still the accuracy is signi cantly low when compared to batches 4, 6 and 7. A possible explanation is that the distribution of data in batch 5 is very di erent from the data in batches 4, 6 and 7 thereby resulting in a drop in classi er performance when experimented under Settings 1 and 2. Interestingly, the classi ers trained under Setting 1 were able to cope with drift to some extent and we believe they are a natural and strong baseline for any drift-correcting machine learning algorithm to compare against. As shown in the gure, the classi er ensembles were able to perform better than these baseline classi ers when tested on most of the batches with signi cant improvements  2Note that this requirement is not necessary if we train classi ers in a purely online fashion [13, 14], but in this paper we focus only on batch training using SVMs.

in accuracy on several batches. This demonstrates the e ectiveness of ensemble methods to automatically detect and cope with sensor drift. Finally, Figure 5 shows how the classi er weights used in the ensemble change with time.

Drift remains to be a challenging problem that sensor technology has to cope with. The most common solution consists of using pre-processing techniques, including univariate and multivariate linear compensation methods, which basically rely on nding linear transformations that normalize the sensor responses across time, and/or selecting the optimal combination of features that are less prone to drift (i.e., feature selection methods). These methods often require frequent re-calibrations and updates and, in some cases, make assumptions of linear and monotonic distributions of sensor drift across time (i.e., they assume that drift is along a speci c direction rather than a random one). The classi er ensemble used in this paper is e ective in detecting and coping with sensor drift by using an ensemble of classiers that track changing conditions. The ensemble method uses a linear combinations of classi ers, in which every base classi er is weighted according to its performance, to obtain better predictive performance as a whole than that could be obtained from any of the individual models acting alone.
The number of measurements chosen from the 36 months  to create the 10 functional training batches (cf. Table 4) to be trained by the classi er ensemble should by no means be viewed as a unique combination in framing the time-evolved sensor array information. Although it is arguable how many months should be considered in each batch, the number of measurements in these functional training batches should be as uniformly distributed as possible, so that every classi er model can be trained with su cient number of samples from each class and month. As mentioned before, it is possible to avoid batch learning algorithms that require su cient number of samples for training and instead design concept drift algorithms that train classi ers in a purely online fashion [13, 14]. These algorithms create a new classi er whenever the overall prediction of the ensemble on a newly arrived training sample turns out to be incorrect and there are pruning mechanisms to control the number of classi ers in the ensemble. However, note that in these approaches the base classi ers in the ensemble have to be trained in an online fashion. In our application, we wanted to be in a position to use powerful non-linear classi ers in the ensemble and therefore SVMs trained in batch mode were an obvious choice. If we were to use online algorithms for coping with concept drift, then we would have to train non-linear SVMs in an online setting which, although not impossible, is a nontrivial problem [8]. Exploring the use of online non-linear SVMs as base classi ers in the ensemble is left for future  work.
An important observation from our sensor drift analysis is that the compensations made by the proposed method remain valid for long periods of time. The 6-month gap between the recordings from the rst 30 months and the  last recorded month did not invalidate the compensation of drift on the same task, despite the fact that the sensors were exposed to poisoning as they were powered-o during this period of time. Such a generalization capability of our method with time makes it feasible to leverage the proposed  drift-correction method even further.
Finally, the level of generality that the proposed drift counteraction method attains is high from the following perspective. By design, the drift counteraction method using classi er ensembles operates on samples collected on-the- y in an online fashion which is important for real-time operations. The technique does not make any assumptions about the nature of drift and is also agnostic to the classi er used in the gas identi cation task. As a consequence, this solution is e ective for many other applications where data is collected over an extended period of time with drifting underlying distributions, and it can be readily translated to more realistic gas sensing applications, including but not limited to identication and localization in the wind tunnel, gas distribution mapping, and gas plume tracking using robots.

This work has been supported by ONR N00014-07-1-0741 and Jet Propulsion Lab contract 1396686. We thank Travis Wong for reading drafts of this manuscript and suggesting improvements, and the anonymous reviewers for their comments.