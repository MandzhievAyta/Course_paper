RI’S DEFINING CHARACTEKISTICS.
OPS4, a production system Carnegie-Mellon University [3, 71.

Rl is implemented in language developed at An OPS4 production system  3The development of Ri was supported by Digital Equipment Corporation. The research that led to the development of OPS4, the language in which Rl is written, was sponsored by the Defense Advanced Research Projects Agency. (DOD), ARPA Order No. 3597, and monitored by the Air Force Avionics Laboratory under Contract F33615-78-C-1151.
The views and conclusions contained in this document are those of the author and should not be interpreted as representing the official policies, either expressed or implied, of Digital Equipment Corporation, the Defense Advanced Research Projects Agency, or the U.S. Government.
VAX, PDP-11, UNIBUS, and MASSBUS are trademarks of Digital Equipment Corporation.

consists of a set of productions held in production memory and a set of data elements (eg, state descriptions) held in working memory. A production is a rule composed of conditions and actions:  Conditions are forms that are instantiated by memory elements.
Actions add elements to working memory or modify existing elements. The recognize-act cycle repeatedly finds all production instantiations and executes one of them.4 Rl exploits this recognition match. Its rules have conditions that recognize situations in which a particular type of extension to a particular type of partial configuration is permissable or required; the actions then effect that extension.

OPS4’s two memories have been augmented,. for this application, with a third. This memory, the data base, contains descriptions of each of the 420 components currently supported for the VAX. Each data base entry consists of the name of a component and a set of eight or so attribute/value pairs that indicate the properties of the component that are relevant for the configuration task. As Rl begins to configure an order, it retrieves the relevant component descriptions. As the configuration is generated, working memory grows to contain descriptions of partial configurations, results of various computations, and context symbols that identify the current subtask.’  Production memory contains all of Rl’s permanent knowledge about how to configure VAX systems. Rl currently has 772 rules that enable it to perform the task.5 These rules can be viewed as state transition operators. The conditional part of each rule describes features that a state must possess in order for the rule to be applied. The action part of the rule indicates what features of that state have to be modified or what features have to be added in order for a new state that is on a solution path to be generated.
Each rule is a more or less autonomous piece of knowledge that watches for a state that it recognizes to be generated. Whenever  40PS4’s cycle time, though it is essentially independent of the size of both production memory and working memory [4], depends on particular features of the production system (eg, the number and complexity of the conditions and actions in each production); the average cycle time for OPS4 interpreting Rl is about 150 milliseconds. CPS4 is implemented in MACLISP; Rl is run on a PDP- 10 (model KL) and loads in 4 12 pages Of core.

5 Only 480 of these ru!es are “configuration rules”; contain more general (non domain-specific) knowledge order to use the configuration rules.

that happens, it can effect a state transition. If all goes well, this new state will, in turn, be recognized by one or more rules; one of these rules will effect another state transition, and so on until the system is configured. English translations of two sample rules are shown in Figure 1.

ASSlGN-UB-MODULES-EXCEPT-THOSE-CONNECTlNG-TO-PANELS-4  IF: THE CURRENT CONTEXT IS ASSIGNING DEVICES TO UNIBUS MODULES AND THERE IS AN UNASSIGNED DUAL PORT DISK DRIVE AND THE TY PE OF CONTROLLER IT REQUIRES IS KNOWN AND THERE ARE TWO SUCH CONTROLLERS NEITHER OF WHICH HAS ANY DEVICES ASSIGNED TO IT AND THE NUMBER OF DEVICES THAT THESE CONTROLLERS CAN SUPPORT IS KNOWN  ASSIGN THE DISK DRIVE TO EACH OF THE CONTROLLERS AND NOTE THAT THE TWO CONTROLLERS HAVE BEEN ASSOCIATED AND THAT EACH SUPPORTS ONE DEVICE  It is usual to distinguish the matching of forms and data from search: for example, in discussing the amount of search occurring in a resolution theorem prover, the unification of clauses is considered to be part of the elementary search step. But Match is also a method for doing search in a state space [6]; it is analogous to methods such as Hill Climbing or Means-ends Analysis, though much more powerful. The characteristic that distinguishes Match from other Heuristic Search methods is that in the case of Match the conditions (tests) associated with each state are sufficient to guarantee that if a state transition is permissible, then the new state will be on a solution path (if there is a solution path). Thus with Match, false paths are never generated, and so backtracking is never required. Match is well suited for the configuration task because, with a single exception, the knowledge that is available at each step is sufficient to distinguish between acceptable and unacceptable paths. The subtask that cannot always be done with Match alone is placing modules on the unibus in an acceptable sequence; to perform this subtask, Rl must occassionally generate several candidate sequences.

degree of conditionality in the configuration task. The fan-in of a rule is the number of distinct rules that could fire immediately before that rule; the fan-out is the number of distinct rules that could fire immediately after the rule. The average fan-in and fan-out of Rl’s rules is 3. The graph of possible rule firing sequences, then, has 666 nodes, one for each of the rules (excluding the 106 output generation rules); each of these nodes has, on the average, three edges coming into it and three going out. It should be clear that unless the selection of which edge to follow can be highly constrained, the cost (in nodes visited) of finding an adequate configuration (an appropriate path through the rules) will be enormous. It is in this context that the power of the Match method used by Rl becomes apparent. When Rl can configure a system without backtracking, it finds a single path that consists, on the average, of about 800 nodes. When Rl must backtrack, it visits an additional N nodes, where N is the product of the number of unsuccessful unibus module sequences it tries (which is rarely more than 2) and the number of nodes that must be expanded to generate a candidate unibus module configuration (which is rarely more than 300).

Rl ‘S EVOLUTION. In a period of less than a year, Rl went from an idea, to a demonstration system that had most of the basic knowledge required in the domain but lacked the ability to deal with complex orders, to a system that possesses true expertise. Its development parallels, in many respects, the development of the several domain-specific systems engineered by Stanford University’s Heuristic Programming Project [2]. Rl’s implementation history divides quite naturally into two stages.
During the first stage, which began in December of 1978 and lasted for about four months, I spent five or six days being tutored in the basics of VAX system configuration, read and reread the two manuals that describe many of the VAX configuration constraints, and implemented an initial version of Rl (consisting of fewer than 200 domain rules) that could configure the simplest of orders correctly, but made numerous mistakes when it tried to tackle more complex orders.” The second stage, which lasted for another four months, was spent in asking people who were expert in the VAX configuration task to examine Rl’s output, point out Rl’s mistakes, and indicate what knowledge Rl was lacking. RI was sufficiently ignorant that finding mistakes was no problem.
Given a criticism of some aspect of the configuration by an expert, all that was necessary in order to refine Rl’s knowledge was to find the offending rule, ask the expert to point out the problem with the condition elements in the rule, and then either modify the rule or split it into two rules that would discriminate between two previously undifferentiated states. During this stage, Rl’s domain knowledge almost tripled.

VALIDATION. During October and November of 1979, Rl was involved in a formal validation procedure. Over the two month period, Rl was given 50 orders to configure. A team of six experts  The fan-in and fan-out of Rl’s rules provide a measure of the  examined RI’s output, spending from one to two hours on each order. In the course of examining the configurations, 12 pieces of errorful knowledge were uncovered. The rules responsible for the errors were modified and the orders were resubmitted to RI and were all configured correctly. Each of these 50 orders contained, on the average, 90 components; RI fired an average of 1056 rules and used an average of 2.5 minutes of cpu time in configuring each order. Since January of 1980, RI has configured over 500 orders. It is now integrated into DEC’s manufacturing organization. It has also begun to be used by DEC’s sales organization to configure orders on the day they are booked.

CONCLUDING REMARKS. RI has proven itself to be a highly competent configurer of VAX-l l/780 systems. The configurations that it produces are consistently adequate, and the information that it makes available to the technicians who physically assemble systems is far more detailed than that produced by the humans who do the task. There are, however, some obvious ways in which to enlarge its domain so that it can become a more helpful system.
Work has already begun on augmenting RI’s knowledge to enable it to configure other computer systems manufactured by DEC. In addition, we plan to augment its knowledge so that it will be able to help with the scheduling of system delivery dates. We al,so plan to augment RI’s knowledge so that it will be able to provide interactive assistance to a customer or salesperson that will allow him, if he wishes, to specify some of the capabilities of the system he wants and let RI select the set of components that will provide those capabilities. Ultimately we hope to develop a salesperson’s assistant, an Rl that can held a customer identify the system that best suits his needs.

ACKNOWLEDGEMENTS. Many people have provided help in various forms. Jon Bentley, Scott Fahlman, Charles Forgy, Betsy Herk, Jill Larkin, Allen Newell, Paul Rosenbloom, and Mike Rychener gave me much encouragement and many valuable ideas. Dave Barstow, Bruce Buchanan, Bob Englemore, Penny Nii, Ted Shortliffe, and Mark Stefik contributed their knowledge engineering expertise. Finally, Jim Baratz, Alan Belancik, Dick Caruso, Sam Fuller, Linda Marshall, Kent McNaughton, Vaidis Mongirdas, Dennis O’Connor, and Mike Powell, all of whom are at DEG, assisted in bringing RI up to industry standards.