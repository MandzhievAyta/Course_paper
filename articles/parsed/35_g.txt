Finding an expressive representation of input sentences is crucial for accurate parsing. Syntactic relations manifest themselves in a broad range of surface indicators, ranging from morphological to lexical, including positional and part-of-speech (POS) tagging features. Traditionally, parsing research has focused on modeling the direct connection between the features and the predicted syntactic relations such as head-modiﬁer (arc) relations in dependency parsing. Even in the case of ﬁrstorder parsers, this results in a high-dimensional vector representation of each arc. Discrete features, and their cross products, can be further complemented with auxiliary information about words  1Our code is available at https://github.com/ taolei87/RBGParser.

participating in an arc, such as continuous vector representations of words. The exploding dimensionality of rich feature vectors must then be balanced with the difﬁculty of effectively learning the associated parameters from limited training data.
A predominant way to counter the high dimensionality of features is to manually design or select a meaningful set of feature templates, which are used to generate different types of features (McDonald et al., 2005a; Koo and Collins, 2010; Martins et al., 2013). Direct manual selection may be problematic for two reasons. First, features may lack clear linguistic interpretation as in distributional features or continuous vector embeddings of words. Second, designing a small subset of templates (and features) is challenging when the relevant linguistic information is distributed across the features. For instance, morphological properties are closely tied to part-of-speech tags, which in turn relate to positional features. These features are not redundant. Therefore, we may suffer a performance loss if we select only a small subset of the features. On the other hand, by including all the rich features, we face over-ﬁtting problems.
We depart from this view and leverage highdimensional feature vectors by mapping them into low dimensional representations. We begin by representing high-dimensional feature vectors as multi-way cross-products of smaller feature vectors that represent words and their syntactic relations (arcs). The associated parameters are viewed as a tensor (multi-way array) of low rank, and optimized for parsing performance. By explicitly representing the tensor in a low-rank form, we have direct control over the effective dimensionality of the set of parameters. We obtain role-dependent low-dimensional representations for words (head, modiﬁer) that are speciﬁcally tailored for parsing accuracy, and use standard online algorithms for optimizing the low-rank tensor components.
The overall approach has clear linguistic and  • Our low dimensional embeddings are tailored to the syntactic context of words (head, modiﬁer). This low dimensional syntactic abstraction can be thought of as a proxy to manually constructed POS tags.

• By automatically selecting a small number of dimensions useful for parsing, we can leverage a wide array of (correlated) features. Unlike parsers such as MST, we can easily beneﬁt from auxiliary information (e.g., word vectors) appended as features.

We implement the low-rank factorization model in the context of ﬁrst- and third-order dependency parsing. The model was evaluated on 14 languages, using dependency data from CoNLL 2008 and CoNLL 2006. We compare our results against the MST (McDonald et al., 2005a) and Turbo (Martins et al., 2013) parsers. The low-rank parser achieves average performance of 89.08% across 14 languages, compared to 88.73% for the Turbo parser, and 87.19% for MST. The power of the low-rank model becomes evident in the absence of any part-of-speech tags. For instance, on the English dataset, the low-rank model trained without POS tags achieves 90.49% on ﬁrst-order parsing, while the baseline gets 86.70% if trained under the same conditions, and 90.58% if trained with 12 core POS tags. Finally, we demonstrate that the model can successfully leverage word vector representations, in contrast to the baselines.

Selecting Features for Dependency Parsing A great deal of parsing research has been dedicated to feature engineering (Lazaridou et al., 2013; Marton et al., 2010; Marton et al., 2011). While in most state-of-the-art parsers, features are selected manually (McDonald et al., 2005a; McDonald et al., 2005b; Koo and Collins, 2010; Martins et al., 2013; Zhang and McDonald, 2012a; Rush and Petrov, 2012a), automatic feature selection methods are gaining popularity (Martins et al., 2011b; Ballesteros and Nivre, 2012; Nilsson and Nugues, 2010; Ballesteros, 2013). Following standard machine learning practices, these algorithms iteratively select a subset of features by optimizing parsing performance on a development set. These feature selection methods are particularly promising in parsing scenarios where the optimal feature  set is likely to be a small subset of the original set of candidate features. Our technique, in contrast, is suitable for cases where the relevant information is distributed across a larger set of related features.

Embedding for Dependency Parsing A lot of recent work has been done on mapping words into vector spaces (Collobert and Weston, 2008; Turian et al., 2010; Dhillon et al., 2011; Mikolov et al., 2013). Traditionally, these vector representations have been derived primarily from co-occurrences of words within sentences, ignoring syntactic roles of the co-occurring words. Nevertheless, any such word-level representation can be used to offset inherent sparsity problems associated with full lexicalization (Cirik and S¸ensoy, 2013). In this sense they perform a role similar to POS tags.
Word-level vector space embeddings have so far had limited impact on parsing performance.
From a computational perspective, adding nonsparse vectors directly as features, including their combinations, can signiﬁcantly increase the number of active features for scoring syntactic structures (e.g., dependency arc). Because of this issue, Cirik and S¸ensoy (2013) used word vectors only as unigram features (without combinations) as part of a shift reduce parser (Nivre et al., 2007).
The improvement on the overall parsing performance was marginal. Another application of word vectors is compositional vector grammar (Socher et al., 2013). While this method learns to map word combinations into vectors, it builds on existing word-level vector representations. In contrast, we represent words as vectors in a manner that is directly optimized for parsing. This framework enables us to learn new syntactically guided embeddings while also leveraging separately estimated word vectors as starting features, leading to improved parsing performance.

Dimensionality Reduction Many machine learning problems can be cast as matrix problems where the matrix represents a set of co-varying parameters. Such problems include, for example, multi-task learning and collaborative ﬁltering.
Rather than assuming that each parameter can be set independently of others, it is helpful to assume that the parameters vary in a low dimensional subspace that has to be estimated together with the parameters. In terms of the parameter matrix, this corresponds to a low-rank assumption. Low-rank constraints are commonly used for improving  generalization (Lee and Seung, 1999; Srebro et al., 2003; Srebro et al., 2004; Evgeniou and Pontil, 2007) A strict low-rank assumption can be restrictive.
Indeed, recent approaches to matrix problems decompose the parameter matrix as a sum of lowrank and sparse matrices (Tao and Yuan, 2011; Zhou and Tao, 2011). The sparse matrix is used to highlight a small number of parameters that should vary independently even if most of them lie on a low-dimensional subspace (Waters et al., 2011; Chandrasekaran et al., 2011). We follow this decomposition while extending the parameter matrix into a tensor.
Tensors are multi-way generalizations of matrices and possess an analogous notion of rank.
Tensors are increasingly used as tools in spectral estimation (Hsu and Kakade, 2013), including in parsing (Cohen et al., 2012) and other NLP problems (de Cruys et al., 2013), where the goal is to avoid local optima in maximum likelihood estimation. In contrast, we expand features for parsing into a multi-way tensor, and operate with an explicit low-rank representation of the associated parameter tensor. The explicit representation sidesteps inherent complexity problems associated with the tensor rank (Hillar and Lim, 2009).
Our parameters are divided into a sparse set corresponding to manually chosen MST or Turbo parser features and a larger set governed by a low-rank tensor.

We will commence here by casting ﬁrst-order dependency parsing as a tensor estimation problem.
We will start by introducing the notation used in the paper, followed by a more formal description of our dependency parsing task.

Let A ∈ Rn×n×d be a 3-dimensional tensor (a 3way array). We denote each element of the tensor as Ai,j,k where i ∈ [n], j ∈ [n], k ∈ [d] and [n] is a shorthand for the set of integers {1, 2, · · · , n}.
Similarly, we use Mi,j and ui to represent the elements of matrix M and vector u, respectively.
We deﬁne the inner product of two tensors (or matrices) as hA, Bi = vec(A)T vec(B), where vec(·) concatenates the tensor (or matrix) elements into a column vector. The squared norm of a tensor/matrix is denoted by kAk2 = hA, Ai.

The Kronecker product of three vectors is denoted by u ⊗ v ⊗ w and forms a rank-1 tensor such that  Note that the vectors u, v, and w may be column or row vectors. Their orientation is deﬁned based on usage. For example, u ⊗ v is a rank-1 matrix uvT when u and v are column vectors (uT v if they are row vectors).
We say that tensor A is in Kruskal form if  where U, V ∈ Rr×n, W ∈ Rr×d and U (i, :) is the ith row of matrix U . We will directly learn a lowrank tensor A (because r is small) in this form as one of our model parameters.

Let x be a sentence and Y(x) the set of possible dependency trees over the words in x. We assume that the score S(x, y) of each candidate dependency tree y ∈ Y(x) decomposes into a sum of “local” scores for arcs. Speciﬁcally:  where h → m is the head-modiﬁer dependency arc in the tree y. Each y is understood as a collection of arcs h → m where h and m index words in x.2 For example, x(h) is the word corresponding to h. We suppress the dependence on x whenever it is clear from context. For example, s(h → m) can depend on x in complicated ways as discussed below. The predicted parse is obtained as yˆ = arg maxy∈Y(x) S(x, y).
A key problem is how we parameterize the arc scores s(h → m). Following the MST parser (McDonald et al., 2005a) we can deﬁne rich features characterizing each head-modiﬁer arc, compiled into a sparse binary vector φh→m ∈ RL that depends on the sentence x as well as the chosen arc h → m (again, we suppress the dependence on x). Based on this feature representation, we deﬁne the score of each arc as sθ(h → m) =  2Note that in the case of high-order parsing, the sum S(x, y) may also include local scores for other syntactic structures, such as grandhead-head-modiﬁer score s(g → h → m). See (Martins et al., 2013) for a complete list of these structures.

Unigram features: form form-p lemma lemma-p pos pos-p morph bias Bigram features: pos-p, pos pos, pos-n pos, lemma morph, lemma Trigram features: pos-p, pos, pos-n  hθ, φh→mi where θ ∈ RL represent adjustable parameters to be learned, and L is the number of parameters (and possible features in φh→m).
We can alternatively specify arc features in terms of rank-1 tensors by taking the Kronecker product of simpler feature vectors associated with the head (vector φh ∈ Rn), and modiﬁer (vector φm ∈ Rn), as well as the arc itself (vector φh,m ∈ Rd). Here φh,m is much lower dimensional than the MST arc feature vector φh→m discussed earlier. For example, φh,m may be composed of only indicators for binned arc lengths3. φh and φm, on the other hand, are built from features shown in Table 1. By taking the cross-product of all these component feature vectors, we obtain the full feature representation for arc h → m as a rank-1 tensor  Note that elements of this rank-1 tensor include feature combinations that are not part of the feature crossings in φh→m. In this sense, the rank-1 tensor represents a substantial feature expansion.
The arc score stensor(h → m) associated with the  3In our current version, φh,m only contains the binned arc length. Other possible features include, for example, the label of the arc h → m, the POS tags between the head and the modiﬁer, boolean ﬂags which indicate the occurence of in-between punctutations or conjunctions, etc.

where the adjustable parameters A also form a tensor. Given the typical dimensions of the component feature vectors, φh, φm, φh,m, it is not even possible to store all the parameters in A. Indeed, in the full English training set of CoNLL-2008, the tensor involves around 8 × 1011 entries while the MST feature vector has approximately 1.5 × 107 features. To counter this feature explosion, we restrict the parameters A to have low rank.

Low-Rank Dependency Scoring We can represent a rank-r tensor A explicitly in terms of parameter matrices U , V , and W as shown in Eq. 1.
As a result, the arc score for the tensor reduces to evaluating U φh, V φm, and W φh,m which are all r dimensional vectors and can be computed efﬁciently based on any sparse vectors φh, φm, and φh,m. The resulting arc score stensor(h → m) is then  By learning parameters U , V , and W that function well in dependency parsing, we also learn contextdependent embeddings for words and arcs. Specifically, U φh (for a given sentence, suppressed) is an r dimensional vector representation of the word corresponding to h as a head word. Similarly, V φm provides an analogous representation for a modiﬁer m. Finally, W φh,m is a vector embedding of the supplemental arc-dependent information. The resulting embedding is therefore tied to the syntactic roles of the words (and arcs), and learned in order to perform well in parsing.
We expect a dependency parsing model to beneﬁt from several aspects of the low-rank tensor scoring. For example, we can easily incorporate additional useful features in the feature vectors φh, φm and φh,m, since the low-rank assumption (for small enough r) effectively counters the otherwise uncontrolled feature expansion. Moreover, by controlling the amount of information we can extract from each of the component feature vectors (via rank r), the statistical estimation problem does not scale dramatically with the dimensions of φh, φm and φh,m. In particular, the low-rank constraint can help generalize to unseen arcs. Consider a feature δ(x(h) = a) · δ(x(m) =  b) · δ(dis(x, h, m) = c) which is non-zero only for an arc a → b with distance c in sentence x.
If the arc has not been seen in the available training data, it does not contribute to the traditional arc score sθ(·). In contrast, with the low-rank constraint, the arc score in Eq. 2 would typically be non-zero.

Combined Scoring Our parsing model aims to combine the strengths of both traditional features from the MST/Turbo parser as well as the new low-rank tensor features. In this way, our model is able to capture a wide range of information including the auxiliary features without having uncontrolled feature explosion, while still having the full accessibility to the manually engineered features that are proven useful. Speciﬁcally, we deﬁne the arc scoresγ (h → m) as the combination  (1 − γ)stensor(h → m) + γsθ(h → m) r = (1 − γ) X[U φh]i[V φm]i[W φh,m]i i=1  where θ ∈ RL, U ∈ Rr×n, V ∈ Rr×n, and W ∈ Rr×d are the model parameters to be learned. The rank r and γ ∈ [0, 1] (balancing the two scores) represent hyper-parameters in our model.

The training set D = {(xˆi, yˆi)}iN=1 consists of N pairs, where each pair consists of a sentence xi and the corresponding gold (target) parse yi. The goal is to learn values for the parameters θ, U , V and W that optimize the combined scoring function Sγ (x, y) = Ph→m∈y sγ (h → m), deﬁned in Eq. 3, for parsing performance. We adopt a maximum soft-margin framework for this learning problem. Speciﬁcally, we ﬁnd parametersθ, U , V , W , and {ξi} that minimize  s.t. Sγ (xˆi, yˆi) ≥ Sγ (xˆi, yi) + kyˆi − yik1 − ξi (4)  where kyˆi −yik1 is the number of mismatched arcs between the two trees, and ξi is a non-negative slack variable. The constraints serve to separate the gold tree from other alternatives in Y(xˆi) with a margin that increases with distance.

The objective as stated is not jointly convex with respect to U , V and W due to our explicit representation of the low-rank tensor. However, if we ﬁx any two sets of parameters, for example, if we ﬁxV and W , then the combined score Sγ (x, y) will be a linear function of both θ and U . As a result, the objective will be jointly convex with respect to θ and U and could be optimized using standard tools. However, to accelerate learning, we adopt an online learning setup. Speciﬁcally, we use the passive-aggressive learning algorithm (Crammer et al., 2006) tailored to our setting, updating pairs of parameter sets, (θ, U ), (θ, V ) and (θ, W ) in an alternating manner. This method is described below.

Online Learning In an online learning setup, we update parameters successively based on each sentence. In order to apply the passive-aggressive algorithm, we ﬁx two ofU , V and W (say, for example, V and W ) in an alternating manner, and apply a closed-form update to the remaining parameters (here U and θ). This is possible since the objective function with respect to (θ, U ) has a similar form as in the original passive-aggressive algorithm. To illustrate this, consider a training sentence xi. The update involves ﬁnding ﬁrst the best competing tree,  which is the tree that violates the constraint in Eq. 4 most (i.e. maximizes the loss ξi). We then obtain parameter increments Δθ and ΔU by solving  s.t. Sγ (xˆi, yˆi) ≥ Sγ (xˆi, y˜i) + kyˆi − y˜ik1 − ξ  In this way, the optimization problem attempts to keep the parameter change as small as possible, while forcing it to achieve mostly zero loss on this single instance. This problem has a closed form solution  where (u v)i = uivi is the Hadamard (elementwise) product. The magnitude of change of θ and U is controlled by the parameter C. By varying C, we can determine an appropriate step size for the online updates. The updates also illustrate how γ balances the effect of the MST component of the score relative to the low-rank tensor score. When γ = 0, the arc scores are entirely based on the lowrank tensor and Δθ = 0. Note that φh, φm, φh,m, and φh→m are typically very sparse for each word or arc. Therefore du and dθ are also sparse and can be computed efﬁciently.

Initialization The alternating online algorithm relies on how we initialize U , V , and W since each update is carried out in the context of the other two. A random initialization of these parameters is unlikely to work well, both due to the dimensions involved, and the nature of the alternating updates.
We consider here instead a reasonable deterministic “guess” as the initialization method.
We begin by training our model without any low-rank parameters, and obtain parameters θ.
The majority of features in this MST component can be expressed as elements of the feature tensor, i.e., as [φh ⊗ φm ⊗ φh,m]i,j,k. We can therefore create a tensor representation of θ such that Bi,j,k equals the corresponding parameter value in θ. We use a low-rank version of B as the initialization. Speciﬁcally, we unfold the tensor B into a matrix B(h) of dimensions n and nd, where n = dim(φh) = dim(φm) and d = dim(φh,m).
For instance, a rank-1 tensor can be unfolded as u ⊗ v ⊗ w = u ⊗ vec(v ⊗ w). We compute the top-r SVD of the resulting unfolded matrix such that B(h) = P T SQ. U is initialized as P . Each right singular vector SiQ(i, :) is also a matrix in Rn×d. The leading left and right singular vectors of this matrix are assigned to V (i, :) and W (i, :) respectively. In our implementation, we run one epoch of our model without low-rank parameters and initialize the tensor A.

Parameter Averaging The passive-aggressive algorithm regularizes the increments (e.g. Δθ and ΔU ) during each update but does not include any overall regularization. In other words, keeping updating the model may lead to large parameter values and over-ﬁtting. To counter this effect, we use parameter averaging as used in the MST and Turbo parsers. The ﬁnal parameters are those averaged across all the iterations (cf. (Collins, 2002)). For simplicity, in our algorithm we average U , V , W and θ separately, which works well empirically.

Datasets We test our dependency model on 14 languages, including the English dataset from CoNLL 2008 shared tasks and all 13 datasets from CoNLL 2006 shared tasks (Buchholz and Marsi, 2006; Surdeanu et al., 2008). These datasets include manually annotated dependency trees, POS tags and morphological information. Following standard practices, we encode this information as features.

Methods We compare our model to MST and Turbo parsers on non-projective dependency parsing. For our parser, we train both a ﬁrst-order parsing model (as described in Section 3 and 4) as well as a third-order model. The third order parser simply adds high-order features, those typically used in MST and Turbo parsers, into our sθ(x, y) = hθ, φ(x, y)i scoring component. The decoding algorithm for the third-order parsing is based on (Zhang et al., 2014). For the Turbo parser, we directly compare with the recent published results in (Martins et al., 2013). For the MST parser, we train and test using the most recent version of the code.4 In addition, we implemented two additional baselines, NT-1st (ﬁrst order) and NT-3rd (third order), corresponding to our model without the tensor component.

Features For the arc feature vector φh→m, we use the same set of feature templates as MST v0.5.1. For head/modiﬁer vector φh and φm, we show the complete set of feature templates used by our model in Table 1. Finally, we use a similar set of feature templates as Turbo v2.1 for 3rd order parsing.
To add auxiliary word vector representations, we use the publicly available word vectors (Cirik  Arabic Bulgarian Chinese Czech Danish Dutch English German Japanese Portuguese Slovene Spanish Swedish Turkish Average  and S¸ensoy, 2013), learned from raw data (Globerson et al., 2007; Maron et al., 2010). Three languages in our dataset – English, German and Swedish – have corresponding word vectors in this collection.5 The dimensionality of this representation varies by language: English has 50 dimensional word vectors, while German and Swedish have 25 dimensional word vectors. Each entry of the word vector is added as a feature value into feature vectors φh and φm. For each word in the sentence, we add its own word vector as well as the vectors of its left and right words.
We should note that since our model parameter A is represented and learned in the low-rank form, we only have to store and maintain the low-rank projections U φh, V φm and W φh,m rather than explicitly calculate the feature tensor φh⊗φm⊗φh,m.
Therefore updating parameters and decoding a sentence is still efﬁcient, i.e., linear in the number of values of the feature vector. In contrast, assume we take the cross-product of the auxiliary word vector values, POS tags and lexical items of a word and its context, and add the crossed values into a normal model (in φh→m). The number of features for each arc would be at least quadratic, growing into thousands, and would be a signiﬁcant impediment to parsing efﬁciency.

Evaluation Following standard practices, we train our full model and the baselines for 10  epochs. As the evaluation measure, we use unlabeled attachment scores (UAS) excluding punctuation. In all the reported experiments, the hyperparameters are set as follows: r = 50 (rank of the tensor), C = 1 for ﬁrst-order model andC = 0.01 for third-order model.

Overall Performance Table 2 shows the performance of our model and the baselines on 14 CoNLL datasets. Our model outperforms Turbo parser, MST parser, as well as its own variants without the tensor component. The improvements of our low-rank model are consistent across languages: results for the ﬁrst order parser are better on 11 out of 14 languages. By comparing NT-1st and NT-3rd (models without low-rank) with our full model (with low-rank), we obtain 0.7% absolute improvement on ﬁrst-order parsing, and 0.3% improvement on third-order parsing. Our model also achieves the best UAS on 5 languages.

We next focus on the ﬁrst-order model and gauge the impact of the tensor component. First, we test our model by varying the hyper-parameter γ which balances the tensor score and the traditional MST/Turbo score components. Figure 1 shows the average UAS on CoNLL test datasets after each training epoch. We can see that the improvement of adding the low-rank tensor is consistent across various choices of hyper parame ter γ. When training with the tensor component alone (γ = 0), the model converges more slowly.
Learning of the tensor is harder because the scoring function is not linear (nor convex) with respect to parameters U , V and W . However, the tensor scoring component achieves better generalization on the test data, resulting in better UAS than NT1st after 8 training epochs.
To assess the ability of our model to incorporate a range of features, we add unsupervised word vectors to our model. As described in previous section, we do so by appending the values of different coordinates in the word vector into φh and φm. As Table 3 shows, adding this information increases the parsing performance for all the three languages. For instance, we obtain more than 0.5% absolute improvement on Swedish.

Syntactic Abstraction without POS Since our model learns a compressed representation of feature vectors, we are interested to measure its performance when part-of-speech tags are not provided (See Table 4). The rationale is that given all other features, the model would induce representations that play a similar role to POS tags. Note that  the performance of traditional parsers drops when tags are not provided. For example, the performance gap is 10% on German. Our experiments show that low-rank parser operates effectively in the absence of tags. In fact, it nearly reaches the performance of the original parser that used the tags on English.

Examples of Derived Projections We manually analyze low-dimensional projections to assess whether they capture syntactic abstraction. For this purpose, we train a model with only a tensor component (such that it has to learn an accurate tensor) on the English dataset and obtain low dimensional embeddings U φw and V φw for each word. The two r-dimension vectors are concatenated as an “averaged” vector. We use this vector to calculate the cosine similarity between words.
Table 5 shows examples of ﬁve closest neighbors of queried words. While these lists include some noise, we can clearly see that the neighbors exhibit similar syntactic behavior. For example, “on” is close to other prepositions. More interestingly, we can consider the impact of syntactic context on the derived projections. The bottom part of Table 5 shows that the neighbors change substantially depending on the syntactic role of the word.
For example, the closest words to the word “increase” are verbs in the context phrase “will increase again”, while the closest words become nouns given a different phrase “an increase of”.

Running Time Table 6 illustrates the impact of estimating low-rank tensor parameters on the running time of the algorithm. For comparison, we also show the NT-1st times across three typical languages. The Arabic dataset has the longest average sentence length, while the Chinese dataset  greatly actively openly signiﬁcantly outright substantially increase rise advance contest halt Exchequer hit shed rallied triggered appeared understate  proﬁt says on earnings adds with franchisees predicts into shares noted at revenue wrote during members contends over will increase again an increase of arguing gain be prices charging payment gone members making subsidiary attacks hit the hardest hit is distributes monopolies stayed pills sang sophistication removed ventures eased factors  has the shortest sentence length in CoNLL 2006.
Based on these results, estimating a rank-50 tensor together with MST parameters only increases the running time by a factor of 1.7.

Accurate scoring of syntactic structures such as head-modiﬁer arcs in dependency parsing typically requires rich, high-dimensional feature representations. We introduce a low-rank factorization method that enables to map high dimensional feature vectors into low dimensional representations. Our method maintains the parameters as a low-rank tensor to obtain low dimensional representations of words in their syntactic roles, and to leverage modularity in the tensor for easy training with online algorithms. We implement the  approach on ﬁrst-order to third-order dependency parsing. Our parser outperforms the Turbo and MST parsers across 14 languages.
Future work involves extending the tensor component to capture higher-order structures. In particular, we would consider second-order structures such as grandparent-head-modiﬁer by increasing the dimensionality of the tensor. This tensor will accordingly be a four or ﬁve-way array. The online update algorithm remains applicable since each dimension is optimized in an alternating fashion.

The authors acknowledge the support of the MURI program (W911NF-10-1-0533) and the DARPA BOLT program. This research is developed in collaboration with the Arabic Language Technoligies (ALT) group at Qatar Computing Research Institute (QCRI) within the LYAS project. We thank Volkan Cirik for sharing the unsupervised word vector data. Thanks to Amir Globerson, Andreea Gane, the members of the MIT NLP group and the ACL reviewers for their suggestions and comments. Any opinions, ﬁndings, conclusions, or recommendations expressed in this paper are those of the authors, and do not necessarily reﬂect the views of the funding organizations.