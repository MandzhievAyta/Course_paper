Improving sparse word similarity models with asymmetric measures  A key assumption of most models of similarity is that a similarity relation is symmetric. This assumption is foundational for some conceptions, such as the idea of a similarity space, in which similarity is the inverse of distance; and it is deeply embedded into many of the algorithms that build on a similarity relation among objects, such as clustering algorithms. The symmetry assumption is not, however, universal, and it is not essential to all applications of similarity, especially when it comes to modeling human similarity judgments.
Citing a number of empirical studies, Tversky (1977) calls symmetry directly into question, and proposes two general models that abandon symmetry. The one most directly related to a large body of word similarity work that followed is what he calls the ratio model, which deﬁnes sim(a, b) as:  Here A and B represent feature sets for the objects a and b respectively; the term in the numerator is a function of the set of shared features, a measure of  similarity, and the last two terms in the denominator measure dissimilarity: α and β are realn-umber weights; when α 6= β, symmetry is abandoned.
To motivate such a measure, Tversky presents experimental data with asymmetric similarity results, including similarity comparisons of countries, line drawings of faces, and letters. Tversky shows that many similarity judgment tasks have an inherent asymmetry; but he also argues, following Rosch (1975), that certain kinds of stimuli are more naturally used as foci or standards than others. Goldstone (in press) summarizes the results succinctly: “Asymmetrical similarity occurs when an object with many features is judged as less similar to a sparser object than vice versa; for example, North Korea is judged to be more like China than China is [like] North Korea.” Thus, one source of asymmetry is the comparison of sparse and dense representations.
The relevance of such considerations to word similarity becomes clear when we consider that for many applications, word similarity measures need to be welld-eﬁned when comparing very frequent words with infrequent words. To make this concrete, let us consider a word representation in the worda-sv-ector paradigm (Lee, 1997; Lin, 1998), using a dependencyb-ased model. Suppose we want to measure the semantic similarity of boat, rank 682 among the nouns in the BNC corpus studied below, which has 1057 nonzero dependency features based on 50 million words of data, with dinghy, rank 6200, which has only 113 nonzero features. At the level of the vector representations we are using, these are events of very different dimensionality; that is, there are ten times as many features in the representation of boat as there are in the representation of dinghy. If in Tversky/Rosch terms, the more frequent word is also a more likely focus, then this is exactly the kind of situation in which asymmetric similarity judgments will arise. Below we show that an  asymmetric measure, using α and β biased in favor of the less frequent word, greatly improves the performance of a dependencyb-ased vector model in capturing human similarity judgments.
Before presenting these results, it will be helpful to slightly reformulate and slightly generalize Tverskys’ ratio model. The reformulation will allow us to directly draw the connection between the ratio model and a set of similarity measures that have played key roles in the similarity literature. First, since Tversky has primarily additive f in mind, we can reformulate f(A ∩ B) as follows  Next, since we are interested in generalizing from sets of features, to realv-alued vectors of features, w1, w2, we deﬁne  (3) Here SI is some numerical operation on realnumber feature values (SI stands for shared information). If the operation is MIN and w1[f ] and w2[f ] both contain the feature weights for f , then  wght(f )= σMIN(w1, w2) = Pf ∈w1∩w2 MIN(w1[f ], w2[f ]),  so with SI set to MIN, Equation (3) includes Equation (2) as a special case. Similarly, σ(w1, w1) represents the summed feature weights of w1, and therefore,  σ(w1,w2) σ(w1,w2)+α[σ(w1,w1)−σ(w1,w2)]+β[σ(w2,w2)−σ(w1,w2)] σ(w1,w2) = ασ(w1,w1)+βσ(w2,w2)+σ(w1,w2)−(α+β)σ(w1,w2)  (4) Thus, if α + β = 1, Tverskys’ ratio model becomes simply:  (5) The computational advantage of this reformulation is that the core similarity operation σ(w1, w2) is done on what is generally only a small number of shared features, and the σ(wi, wi) calculations (which we will call selfs-imilarities), can be computed in advance. Note that sim(w1, w2) is symmetric if and only if α = 0.5. When α > 0.5,  sim(w1, w2) is biased in favor of w1 as the referent; When α < 0.5, sim(w1, w2) is biased in favor of w2.
Consider four similarity functions that have played important roles in the literature on similarity:  (6) The function DICE PROD is not well known in the word similarity literature, but in the data mining literature it is often just called Dice coefﬁcient, because it generalized the set comparison function of Dice (1945). Observe that cosine is a special case of DICE PROD. DICE† was introduced in Curran (2004) and was the most successful function in his evaluation. Since LIN was introduced in Lin (1998); several different functions have born that name. The version used here is the one used in Curran (2004).
The three distinct functions in Equation 6 have a similar form. In fact, all can be deﬁned in terms of σ functions differing only in their SI operation.
Let σSI be a shared feature sum for operation SI, as deﬁned in Equation (3). We deﬁne the Tverskynormalized version of σSI, written TSI, as:1  Note that TSI is just the special case of Tverskys’ ratio model (5) in which α = 0.5 and the similarity measure is symmetric.
We deﬁne three SI operations σPROD2, σMIN, and σAVG as follows:  σSI(w1, w2) Pf ∈w1∩w2 w1[f ] ∗ w2[f ] Pf ∈w1∩w2 w1[f ] +2w2[f ] Pf ∈w1∩w2 MIN(w1[f ], w2[f ])  σJACC(w1, w2) = σ(w1, w1) + σσ((ww21,, ww22)) − σ(w1, w2)  It is easy to generalize the result from van Rijsbergen (1979) for the original set-speciﬁc versions of Dice and Jaccard, a nd show that all of the Tversky family functions discussed above are monotonic in Jaccard.
2σPROD , of course, is dot product.

This yields the three similarity functions cited above:  Thus, all three of these functions are special cases of symmetric ratio models. Below, we investigate asymmetric versions of all three, which we write as Tα,SI(w1, w2), deﬁned as:  Following Lee (1997), who investigates a different family of asymmetric similarity functions, we will refer to these as αs-kewed measures.
We also will look at a rankb-iased family of measures:  Rα,SI(w1, w2) = Tα,SI(wh, wl) where wl = arg min w∈{ w1,w2} Rank(w) wh = arg max w∈{ w1,w2} Rank(w)  (10) Here, Tα,SI(wh, wl) is as deﬁned in (9), and the αweighted word is always the less frequent word.
For example, consider comparing the 100f-eature vector for dinghy to the 1000 feature vector for boat: if α is high, we give more weight to the proportion of dinghys’ features that are shared than we give to the proportion of boats’ features that are shared.
In the following sections we present data showing that the performance of a dependencyb-ased similarity system in capturing human similarity judgments can be greatly improved with rankbias and αs-kewing. We will investigate the three asymmetric functions deﬁned above.3 We argue that the advantages of rank bias are tied to improved similarity estimation when comparing vectors of very different dimensionality. We then turn to the problem of ﬁnding a words’ nearest semantic neighbors. The nearest neighbor problem is a rather a natural ground in which to try out ideas on asymmetry, since the nearest neighbor relation is itself not symmetrical. We show that αs-kewing can be used to improve the quality of nearest neighbors found for both high- and midfrequency words.

3Interestingly, Equation (9) does not yield an asymmetric version of cosine. Plugging unit vectors into the α-skewed version of DICE PROD still leaves us with a symmetric function (COS), whatever the value of α.

2. For each of the 3 rankb-iased similarity systems (Rα,SI) and cosine, we computed correlations with human judgments for the pairs in 2 standard wordsets: the combined MillerCharles/RubensteinG-oodenough word sets (Miller and Charles, 1991; Rubenstein and Goodenough, 1965) and the Wordsim 353 word set (Finkelstein et al., 2002), as well as to a subset of the Wordsim set restricted to reﬂect semantic similarity judgments, which we will refer to as Wordsim 201.

3. For each of 3 αs-kewed similarity systems (Tα,SI) and cosine, we found the nearest neighbor from among BNC nouns (of any rank) for the 10,000 most frequent BNC nouns using the the dependency DB created in step 2.

4. To evaluate of the quality of the nearest neighbors pairs found in Step 4, we scored them using the Wordnetb-ased Personalized Pagerank system described in Agirre (2009) (UKB), a non distributional WordNet based measure, and the best system in Table 1.

is probably probably an overtrained optimum. The point is that αs-kewing always helps: For all three systems, the improvement shown in raising α from .5 to whatever the optimum is is monotonic. This is shown in Figure 1. Table 2 shows very similar results using the Stanford parser, demonstrating the pattern is not limited to a single parsing model.
In Table 3, we list the pairs whose reranking on the MC/RG dataset contributed most to the improvement of the α = .9 system over the default α = .5 system. In the last column an approximation of the amount of correlation improvement provided by that pair (δ):4 Note the 3 of the 5 items contributing the most improvement this system were pairs with a large difference in rank.
Choosing α = .9, weights recall toward the rarer word. We conjecture that the reason this helps is Tverskys’ principle: It is natural to use the sparser  4The approximation is based on the formula for computing Spearmans’ R with no ties. If n is the number of items, then the improvement on that item is:  6 ∗ [(baseline − gold)2 − (test − gold)2] n ∗ (n2 − 1)  Figure 2 gives the results of our nearest neighbor study on the BNC for the case of DICE PROD. The graphs for the other two αs-kewed systems are nearly identical, and are not shown due to space limitations. The target word, the word whose nearest neighbor is being found, always receives the weight 1 − α. The xa-xis shows target word rank; the ya-xis shows the average UKB similarity scores assigned to nearest neighbors every 50 ranks. All the systems show degraded nearest neighbor quality as target words grow rare, but at lower ranks, the α = .04 nearest neighbor system fares considerably better than the symmetric α = .50 system; the line across the bottom tracks the score of a system with randomly generated nearest neighbors. The symmetric DICE PROD system is as an excellent nearest neighbor system at high ranks but drops below the α = .04 system at around rank 3500. We see that the α = .8 system is even better than the symmetric system at high ranks, but degrades much more quickly.
We explain these results on the basis of the principle developed for the human correlation data: To reﬂect natural judgments of similarity for comparisons of representations of differing sparseness, α should be tipped toward the sparser representation.
Thus, α = .80 works best for high rank target words, because most nearest neighbor candi If the SI is MIN, then the two terms in the denominator are the inverses of what W&W call differencew-eighted precision and recall:  dates are less frequent, and α = .8 tips the balance toward the nontarget words. On the other hand, when the target word is a low ranking word, a high α weight means it never receives the highest weight, and this is disastrous, since most good candidates are higher ranking. Conversely, α = .04 works better.

The debt owed to Tversky (1977) has been made clear in the introduction. Less clear is the debt owed to Jimenez et al. (2012), which also proposes an asymmetric similarity framework based on Tverskys’ insights. Jimenez et al. showed the continued relevance of Tverskys’ work.
Motivated by the problem of measuring how well the distribution of one word w1 captures the distribution of another w2, Weeds and Weir (2005) also explore asymmetric models, expressing similarity calculations as weighted combinations of several variants of what they call precision and recall. Some of their models are also Tverskyan ratio models. To see this, we divide (9) everywhere by σ(w1, w2):  1 TSI(w1, w2) = ασ·σ(w(w11,w,w21)) + (1−α)· σ(w2,w2) σ(w1,w2)  That is, TMIN is a weighted harmonic mean of precision and recall, the soc-alled weighted Fmeasure (Manning and Schu¨tze, 1999). W&Ws’ additive precision/recall models appear not to be Tversky models, since they compute separate sums for precision and recall from the f ∈ w1 ∩ w2, one using w1[f ], and one using w2[f ].
Long before Weed and Weir, Lee (1999) proposed an asymmetric similarity measure as well.
Like Weeds and Weir, her perspective was to calculate the effectiveness of using one distribution as a proxy for the other, a fundamentally asymmetric problem. For distributions q and r, Lees’ αs-kew divergence takes the KLd-ivergence of a mixture of q and r from q, using the α parameter to deﬁne the proportions in the mixture.

We have shown that Tverskys’ asymmetric ratio models can improve performance in capturing human judgments and produce better nearest neighbors. To validate these very preliminary results, we need to explore applications compatible with asymmetry, such as the TOEFLl-ike synonym discovery task in Freitag et al. (2005), and the PPa-ttachment task in Dagan et al. (1999).

This work reported here was supported by NSF CDI grant # 1028177.