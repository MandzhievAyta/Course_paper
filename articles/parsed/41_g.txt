Reinforcement Learning for Mapping Instructions to Actions  The problem of interpreting instructions written in natural language has been widely studied since the early days of artiﬁcial intelligence (Winograd, 1972; Di Eugenio, 1992). Mapping instructions to a sequence of executable actions would enable the automation of tasks that currently require human participation. Examples include conﬁguring software based on how-to guides and operating simulators using instruction manuals. In this paper, we present a reinforcement learning framework for inducing mappings from text to actions without the need for annotated training examples.
For concreteness, consider instructions from a Windows troubleshooting guide on deleting temporary folders, shown in Figure 1. We aim to map  1Code, data, and annotations used in this work are available at http://groups.csail.mit.edu/rbg/code/rl/  this text to the corresponding low-level commands and parameters. For example, properly interpreting the third instruction requires clicking on a tab, ﬁnding the appropriate option in a tree control, and clearing its associated checkbox.
In this and many other applications, the validity of a mapping can be veriﬁed by executing the induced actions in the corresponding environment and observing their effects. For instance, in the example above we can assess whether the goal described in the instructions is achieved, i.e., the folder is deleted. The key idea of our approach is to leverage the validation process as the main source of supervision to guide learning. This form of supervision allows us to learn interpretations of natural language instructions when standard supervised techniques are not applicable, due to the lack of human-created annotations.
Reinforcement learning is a natural framework for building models using validation from an environment (Sutton and Barto, 1998). We assume that supervision is provided in the form of a reward function that deﬁnes the quality of executed actions. During training, the learner repeatedly constructs action sequences for a set of given documents, executes those actions, and observes the resulting reward. The learner’s goal is to estimate a  policy — a distribution over actions given instruction text and environment state — that maximizes future expected reward. Our policy is modeled in a log-linear fashion, allowing us to incorporate features of both the instruction text and the environment. We employ a policy gradient algorithm to estimate the parameters of this model.
We evaluate our method on two distinct applications: Windows troubleshooting guides and puzzle game tutorials. The key ﬁndings of our experiments are twofold. First, models trained only with simple reward signals achieve surprisingly high results, coming within 11% of a fully supervised method in the Windows domain. Second, augmenting unlabeled documents with even a small fraction of annotated examples greatly reduces this performance gap, to within 4% in that domain. These results indicate the power of learning from this new form of automated supervision.

Grounded Language Acquisition Our work ﬁts into a broader class of approaches that aim to learn language from a situated context (Mooney, 2008a; Mooney, 2008b; Fleischman and Roy, 2005; Yu and Ballard, 2004; Siskind, 2001; Oates, 2001). Instances of such approaches include work on inferring the meaning of words from video data (Roy and Pentland, 2002; Barnard and Forsyth, 2001), and interpreting the commentary of a simulated soccer game (Chen and Mooney, 2008). Most of these approaches assume some form of parallel data, and learn perceptual cooccurrence patterns. In contrast, our emphasis is on learning language by proactively interacting with an external environment.

Reinforcement Learning for Language Processing Reinforcement learning has been previously applied to the problem of dialogue management (Schefﬂer and Young, 2002; Roy et al., 2000; Litman et al., 2000; Singh et al., 1999). These systems converse with a human user by taking actions that emit natural language utterances. The reinforcement learning state space encodes information about the goals of the user and what they say at each time step. The learning problem is to ﬁnd an optimal policy that maps states to actions, through a trial-and-error process of repeated interaction with the user.
Reinforcement learning is applied very differently in dialogue systems compared to our setup.

In some respects, our task is more easily amenable to reinforcement learning. For instance, we are not interacting with a human user, so the cost of interaction is lower. However, while the state space can be designed to be relatively small in the dialogue management task, our state space is determined by the underlying environment and is typically quite large. We address this complexity by developing a policy gradient algorithm that learns efﬁciently while exploring a small subset of the states.

Our task is to learn a mapping between documents and the sequence of actions they express. Figure 2 shows how one example sentence is mapped to three actions.

Mapping Text to Actions As input, we are given a document d, comprising a sequence of sentences (u1, . . . , u`), where each ui is a sequence of words. Our goal is to map d to a sequence of  aacntdioenxse~cau=ted(as0e,q.u.e.n,taianl−ly1.2). Actions are predicted  An action a = (c, R, W 0) encompasses a command c, the command’s parameters R, and the words W 0 specifying c and R. Elements of R refer to objects available in the environment state, as described below. Some parameters can also refer to words in document d. Additionally, to account for words that do not describe any actions, c can be a null command.

The Environment The environment state E speciﬁes the set of objects available for interaction, and their properties. In Figure 2, E is shown on the right. The environment state E changes in response to the execution of command c with parameters R according to a transition distribution p(E 0|E , c, R). This distribution is a priori unknown to the learner. As we will see in Section 5, our approach avoids having to directly estimate this distribution.

State To predict actions sequentially, we need to track the state of the document-to-actions mapping over time. A mapping state s is a tuple (E , d, j, W ), where E refers to the current environment state; j is the index of the sentence currently being interpreted in document d; and W contains words that were mapped by previous actions for  2That is, action ai is executed before ai+1 is predicted.

the same sentence. The mapping state s is observed after each action.
The initial mapping state s0 for document d is (Ed, d, 0, ∅); Ed is the unique starting environment state for d. Performing action a in state s = (E , d, j, W ) leads to a new state s0 according to distribution p(s0|s, a), deﬁned as follows: E transitions according to p(E 0|E , c, R), W is updated with a’s selected words, and j is incremented if all words of the sentence have been mapped. For the applications we consider in this work, environment state transitions, and consequently mapping state transitions, are deterministic.

Training During training, we are provided with a set D of documents, the ability to sample from the transition distribution, and a reward function r(h). Here, h = (s0, a0, . . . , sn−1, an−1, sn) is a history of states and actions visited while interpreting one document. r(h) outputs a realvalued score that correlates with correct action selection.3 We consider both immediate reward, which is available after each action, and delayed reward, which does not provide feedback until the last action. For example, task completion is a delayed reward that produces a positive value after the ﬁnal action only if the task was completed successfully. We will also demonstrate how manually annotated action sequences can be incorporated into the reward.

3In most reinforcement learning problems, the reward function is deﬁned over state-action pairs, as r(s, a) — in this sctaasned,arr(dhﬁn)it=e-hPoritzro(nsMt, aartk)o,vanddecoisuirofnoprmroucleastsio.nPobleiccyomgreas- a dient approaches allow us to learn using the more general case of history-based reward.

The goal of training is to estimate parameters θ of the action selection distribution p(a|s, θ), called the policy. Since the reward correlates with action sequence correctness, the θ that maximizes expected reward will yield the best actions.

Our goal is to predict a sequence of actions. We construct this sequence by repeatedly choosing an action given the current mapping state, and applying that action to advance to a new state.
Given a state s = (E , d, j, W ), the space of possible next actions is deﬁned by enumerating subspans of unused words in the current sentence (i.e., subspans of the jth sentence of d not in W ), and the possible commands and parameters in environment state E .4 We model the policy distribution p(a|s; θ) over this action space in a log-linear fashion (Della Pietra et al., 1997; Lafferty et al., 2001), giving us the ﬂexibility to incorporate a diverse range of features. Under this representation, the policy distribution is:  where φ(s, a) ∈ Rn is an n-dimensional feature representation. During test, actions are selected according to the mode of this distribution.

4For parameters that refer to words, the space of possible values is deﬁned by the unused words in the current sentence.

During training, our goal is to ﬁnd the optimal policy p(a|s; θ). Since reward correlates with correct action selection, a natural objective is to maximize expected future reward — that is, the reward we expect while acting according to that policy from state s. Formally, we maximize the value function:  where the history h is the sequence of states and actions encountered while interpreting a single document d ∈ D. This expectation is averaged over all documents in D. The distribution p(h|θ) returns the probability of seeing history h when starting from state s and acting according to a policy with parameters θ. This distribution can be decomposed into a product over time steps:  Our reinforcement learning problem is to ﬁnd the parameters θ that maximize Vθ from equation 2.
Although there is no closed form solution, policy gradient algorithms (Sutton et al., 2000) estimate the parameters θ by performing stochastic gradient ascent. The gradient of Vθ is approximated by interacting with the environment, and the resulting reward is used to update the estimate of θ. Policy gradient algorithms optimize a non-convex objective and are only guaranteed to ﬁnd a local optimum. However, as we will see, they scale to large state spaces and can perform well in practice.
To ﬁnd the parameters θ that maximize the objective, we ﬁrst compute the derivative of Vθ. Expanding according to the product rule, we have:  (4) where the inner sum is over all time steps t in the current history h. Expanding the inner partial derivative we observe that:  (5) which is the derivative of a log-linear distribution.
Equation 5 is easy to compute directly. However, the complete derivative of Vθ in equation 4  Input: A document set D, Feature representation φ, Reward function r(h), Number of iterations T Initialization: Set θ to small random values.

1 for i = 1 . . . T do 2 foreach d ∈ D do 3 Sample history h ∼ p(h|θ) where h = (s0, a0, . . . , an−1, sn) as follows: for t = 0 . . . n − 1 do Sample action at ∼ p(a|st; θ) Execute at on state st: st+1 ∼ p(s|st, at) end  is intractable, because computing the expectation would require summing over all possible histories. Instead, policy gradient algorithms employ stochastic gradient ascent by computing a noisy estimate of the expectation using just a subset of the histories. Speciﬁcally, we draw samples from p(h|θ) by acting in the target environment, and use these samples to approximate the expectation in equation 4. In practice, it is often sufﬁcient to sample a single history h for this approximation.
Algorithm 1 details the complete policy gradient algorithm. It performs T iterations over the set of documents D. Step 3 samples a history that maps each document to actions. This is done by repeatedly selecting actions according to the current policy, and updating the state by executing the selected actions. Steps 4 and 5 compute the empirical gradient and update the parameters θ.
In many domains, interacting with the environment is expensive. Therefore, we use two techniques that allow us to take maximum advantage of each environment interaction. First, a history h = (s0, a0, . . . , sn) contains subsequences (si, ai, . . . sn) for i = 1 to n − 1, each with its own reward value given by the environment as a side effect of executing h. We apply the update from equation 5 for each subsequence. Second, for a sampled history h, we can propose alternative histories h0 that result in the same commands and parameters with different word spans. We can again apply equation 5 for each h0, weighted by its probability under the current policy, pp((hh0||θθ)) .

The algorithm we have presented belongs to a family of policy gradient algorithms that have been successfully used for complex tasks such as robot control (Ng et al., 2003). Our formulation is unique in how it represents natural language in the reinforcement learning framework.

We can design a range of reward functions to guide learning, depending on the availability of annotated data and environment feedback. Consider the case when every training document d ∈ D is annotated with its correct sequence of actions, and state transitions are deterministic. Given these examples, it is straightforward to construct a reward function that connects policy gradient to maximum likelihood. Speciﬁcally, deﬁne a reward function r(h) that returns one when h matches the annotation for the document being analyzed, and zero otherwise. Policy gradient performs stochastic gradient ascent on the objective from equation 2, performing one update per document. For document d, this objective becomes:  where hd is the history corresponding to the annotated action sequence. Thus, with this reward policy gradient is equivalent to stochastic gradient ascent with a maximum likelihood objective.
At the other extreme, when annotations are completely unavailable, learning is still possible given informative feedback from the environment. Crucially, this feedback only needs to correlate with action sequence quality. We detail environment-based reward functions in the next section. As our results will show, reward functions built using this kind of feedback can provide strong guidance for learning. We will also consider reward functions that combine annotated supervision with environment feedback.

We study two applications of our model: following instructions to perform software tasks, and solving a puzzle game using tutorial guides.

On its Help and Support website,5 Microsoft publishes a number of articles describing how to per Notation o Parameter referring to an environment object L Set of object class names (e.g. “button”) V Vocabulary Features on W and object o Test if o is visible in s Test if o has input focus Test if o is in the foreground Test if o was previously interacted with Test if o came into existence since last action Min. edit distance between w ∈ W and object labels in s  Features on words in W , command c, and object o ∀c0 ∈ C, w ∈ V : test if c0 = c and w ∈ W ∀c0 ∈ C, l ∈ L: test if c0 = c and l is the class of o  form tasks and troubleshoot problems in the Windows operating systems. Examples of such tasks include installing patches and changing security settings. Figure 1 shows one such article.
Our goal is to automatically execute these support articles in the Windows 2000 environment.
Here, the environment state is the set of visible user interface (UI) objects, and object properties such as label, location, and parent window.
Possible commands include left-click, right-click, double-click, and type-into, all of which take a UI object as a parameter; type-into additionally requires a parameter for the input text.
Table 1 lists some of the features we use for this domain. These features capture various aspects of the action under consideration, the current Windows UI state, and the input instructions. For example, one lexical feature measures the similarity of a word in the sentence to the UI labels of objects in the environment. Environment-speciﬁc features, such as whether an object is currently in focus, are useful when selecting the object to manipulate. In total, there are 4,438 features.

Reward Function Environment feedback can be used as a reward function in this domain. An obvious reward would be task completion (e.g., whether the stated computer problem was ﬁxed).
Unfortunately, verifying task completion is a challenging system issue in its own right.
Instead, we rely on a noisy method of checking whether execution can proceed from one sentence to the next: at least one word in each sentence has to correspond to an object in the envi ronment.6 For instance, in the sentence from Figure 2 the word “Run” matches the Run... menu item. If no words in a sentence match a current environment object, then one of the previous sentences was analyzed incorrectly. In this case, we assign the history a reward of -1. This reward is not guaranteed to penalize all incorrect histories, because there may be false positive matches between the sentence and the environment. When at least one word matches, we assign a positive reward that linearly increases with the percentage of words assigned to non-null commands, and linearly decreases with the number of output actions.
This reward signal encourages analyses that interpret all of the words without producing spurious actions.

Our second application is to a puzzle game called Crossblock, available online as a Flash game.7 Each of 50 puzzles is played on a grid, where some grid positions are ﬁlled with squares. The object of the game is to clear the grid by drawing vertical or horizontal line segments that remove groups of squares. Each segment must exactly cross a speciﬁc number of squares, ranging from two to seven depending on the puzzle. Humans players have found this game challenging and engaging enough to warrant posting textual tutorials.8 A sample puzzle and tutorial are shown in Figure 3.
The environment is deﬁned by the state of the grid. The only command is clear, which takes a parameter specifying the orientation (row or column) and grid location of the line segment to be  6We assume that a word maps to an environment object if the edit distance between the word and the object’s name is below a threshold value.
7hexaditidom.deviantart.com/art/Crossblock-108669149 8www.jayisgames.com/archives/2009/01/crossblock.php  removed. The challenge in this domain is to segment the text into the phrases describing each action, and then correctly identify the line segments from references such as “the bottom four from the second column from the left.” For this domain, we use two sets of binary features on state-action pairs (s, a). First, for each vocabulary word w, we deﬁne a feature that is one if w is the last word of a’s consumed words W 0.
These features help identify the proper text segmentation points between actions. Second, we introduce features for pairs of vocabulary word w and attributes of action a, e.g., the line orientation and grid locations of the squares that a would remove. This set of features enables us to match words (e.g., “row”) with objects in the environment (e.g., a move that removes a horizontal series of squares). In total, there are 8,094 features.

Reward Function For Crossblock it is easy to directly verify task completion, which we use as the basis of our reward function. The reward r(h) is -1 if h ends in a state where the puzzle cannot be completed. For solved puzzles, the reward is a positive value proportional to the percentage of words assigned to non-null commands.

Datasets For the Windows domain, our dataset consists of 128 documents, divided into 70 for training, 18 for development, and 40 for test. In the puzzle game domain, we use 50 tutorials, divided into 40 for training and 10 for test.9 Statistics for the datasets are shown below.

Total # of documents Total # of words Vocabulary size Avg. words per sentence Avg. sentences per document Avg. actions per document  Windows Puzzle 128 50 5562 994 610 46 9.93 19.88 4.38 1.00 10.37 5.86  The data exhibits certain qualities that make for a challenging learning problem. For instance, there are a surprising variety of linguistic constructs — as Figure 4 shows, in the Windows domain even a simple command is expressed in at least six different ways.

9For Crossblock, because the number of puzzles is limited, we did not hold out a separate development set, and report averaged results over vﬁe training/test splits.

Experimental Framework To apply our algorithm to the Windows domain, we use the Win32 application programming interface to simulate human interactions with the user interface, and to gather environment state information. The operating system environment is hosted within a virtual machine,10 allowing us to rapidly save and reset system state snapshots. For the puzzle game domain, we replicated the game with an implementation that facilitates automatic play.
As is commonly done in reinforcement learning, we use a softmax temperature parameter to smooth the policy distribution (Sutton and Barto, 1998), set to 0.1 in our experiments. For Windows, the development set is used to select the best parameters. For Crossblock, we choose the parameters that produce the highest reward during training. During evaluation, we use these parameters to predict mappings for the test documents.

Evaluation Metrics For evaluation, we compare the results to manually constructed sequences of actions. We measure the number of correct actions, sentences, and documents. An action is correct if it matches the annotations in terms of command and parameters. A sentence is correct if all of its actions are correctly identiﬁed, and analogously for documents.11 Statistical signiﬁcance is measured with the sign test.
Additionally, we compute a word alignment score to investigate the extent to which the input text is used to construct correct analyses. This score measures the percentage of words that are aligned to the corresponding annotated actions in correctly analyzed documents.

Baselines We consider the following baselines to characterize the performance of our approach.

10VMware Workstation, available at www.vmware.com 11In these tasks, each action depends on the correct execution of all previous actions, so a single error can render the remainder of that document’s mapping incorrect. In addition, due to variability in document lengths, overall action accuracy is not guaranteed to be higher than document accuracy.

• Full Supervision Sequence prediction problems like ours are typically addressed using supervised techniques. We measure how a standard supervised approach would perform on this task by using a reward signal based on manual annotations of output action sequences, as deﬁned in Section 5.2. As shown there, policy gradient with this reward is equivalent to stochastic gradient ascent with a maximum likelihood objective.

• Partial Supervision We consider the case when only a subset of training documents is annotated, and environment reward is used for the remainder. Our method seamlessly combines these two kinds of rewards.

• Random and Majority (Windows) We consider two na¨ıve baselines. Both scan through each sentence from left to right. A command c is executed on the object whose name is encountered ﬁrst in the sentence. This command c is either selected randomly, or set to the majority command, which is leftclick. This procedure is repeated until no more words match environment objects.

• Random (Puzzle) We consider a baseline that randomly selects among the actions that are valid in the current game state.12  Table 2 presents evaluation results on the test sets.
There are several indicators of the difﬁculty of this task. The random and majority baselines’ poor performance in both domains indicates that na¨ıve approaches are inadequate for these tasks. The performance of the fully supervised approach provides further evidence that the task is challenging.
This difﬁculty can be attributed in part to the large branching factor of possible actions at each step — on average, there are 27.14 choices per action in the Windows domain, and 9.78 in the Crossblock domain.
In both domains, the learners relying only on environment reward perform well. Although the fully supervised approach performs the best, adding just a few annotated training examples to the environment-based learner signiﬁcantly reduces the performance gap.

12Since action selection is among objects, there is no natural majority baseline for the puzzle.

word alignments for the successfully completed documents. Note the puzzle domain has only single sentence documents, so its sentence and document scores are identical. The partial supervision line  refers to 20 out of 70 annotated training documents for Windows, and 10 out of 40 for the puzzle. Each  is a statistically signiﬁcant improvement over the result immediately above it;  documents, with and without environment reward for the remaining unannotated documents.

structions and actions. This approach is able to use  tion, to learn to analyze text. We showed that hav ing access to a suitable reward function can signif access to text features. This is possible in the game  goal state that is independent of the instructions.

ing that access to the instructions signiﬁcantly im are those of the authors, and do not necessarily re-